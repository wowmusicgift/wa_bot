import os
import json
import threading
import time
from datetime import datetime

import requests
from flask import Flask, request, render_template_string
import openai
import pytz
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# Flask app
app = Flask(__name__)

# API –∫–ª—é—á–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
openai.api_key = os.environ.get("OPENAI_API_KEY")
WHATSAPP_TOKEN = os.environ.get("WHATSAPP_TOKEN")
WHATSAPP_PHONE_ID = os.environ.get("WHATSAPP_PHONE_ID")
WHATSAPP_VERIFY_TOKEN = os.environ.get("WHATSAPP_VERIFY_TOKEN")
WHATSAPP_API_URL = f"https://graph.facebook.com/v18.0/{WHATSAPP_PHONE_ID}/messages"

ADMIN_CHAT_ID = "-4877024070"
TIMEZONE = pytz.timezone("Asia/Almaty")
conversation_history = {}
last_message_time = {}
pending_timers = {}
DELAY_SECONDS = 10

# Google Sheets
SHEET_ID = "16PtWH2dcR5bIeIQeBxsr8nOePKO7p6LMveKLse1N40s"
if not os.path.exists("credentials.json"):
    creds_env = os.environ.get("GOOGLE_CREDS_JSON")
    if creds_env:
        with open("credentials.json", "w") as f:
            f.write(creds_env)

@app.route("/")
def home():
    return "ü§ñ WhatsApp –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route("/webhook", methods=["GET", "POST"])
def whatsapp_webhook():
    if request.method == "GET":
        token = request.args.get("hub.verify_token")
        challenge = request.args.get("hub.challenge")
        if token and challenge and token == WHATSAPP_VERIFY_TOKEN:
            return challenge, 200
        return "–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏", 403

    data = request.get_json()
    print("üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", json.dumps(data, indent=2, ensure_ascii=False))
    try:
        entry = data["entry"][0]
        changes = entry["changes"][0]
        value = changes["value"]
        messages = value.get("messages")
        if messages:
            msg = messages[0]
            wa_id = msg["from"]
            text = msg["text"]["body"].strip()
            handle_user_message(wa_id, text)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)
    return "ok", 200

def handle_user_message(user_id, text):
    if text.lower() == "memory_clean":
        conversation_history[user_id] = []
        last_message_time[user_id] = time.time()
        send_message(user_id, "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üòä")
        return

    if user_id not in conversation_history:
        conversation_history[user_id] = []
        send_message(user_id, "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! ‚ò∫Ô∏è –ß–µ–º –º–æ–∂–µ–º –ø–æ–º–æ—á—å? –•–æ—Ç–∏—Ç–µ –∫–æ–≥–æ-—Ç–æ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å? üòÅ")

    conversation_history[user_id].append({"role": "user", "content": text})
    conversation_history[user_id] = conversation_history[user_id][-50:]
    last_message_time[user_id] = time.time()

    if user_id in pending_timers:
        pending_timers[user_id].cancel()

    timer = threading.Timer(DELAY_SECONDS, process_delayed_reply, args=(user_id,))
    timer.start()
    pending_timers[user_id] = timer

def process_delayed_reply(user_id):
    if time.time() - last_message_time[user_id] >= DELAY_SECONDS:
        reply = generate_gpt_reply(conversation_history[user_id])
        if reply:
            conversation_history[user_id].append({"role": "assistant", "content": reply})
            conversation_history[user_id] = conversation_history[user_id][-50:]
            send_message(user_id, reply)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ GPT —Å–∫–∞–∑–∞–ª, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É
            trigger_phrases = ["–Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É", "–ø—Ä–∏—Å—Ç—É–ø–∞–µ–º", "–æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç—Ä—ã–≤–∫–∏", "–≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –≤—Å—ë –±—É–¥–µ—Ç"]
            triggered = any(phrase in reply.lower() for phrase in trigger_phrases)

            # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ñ–ª–∞–≥ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            started_flag = any(msg.get("started") for msg in conversation_history[user_id] if isinstance(msg, dict))

            if triggered and not started_flag:
                # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ñ–ª–∞–≥ –∏ –≤—ã–∑–æ–≤–µ–º notify_admin
                conversation_history[user_id].append({"started": True})
                notify_admin(user_id, conversation_history[user_id])

        pending_timers.pop(user_id, None)

def send_message(to, text, platform="whatsapp"):
    try:
        if platform == "whatsapp":
            headers = {
                "Authorization": f"Bearer {WHATSAPP_TOKEN}",
                "Content-Type": "application/json"
            }
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ —Å +77 –Ω–∞ 87
            if to.startswith("77"):
                to = "787" + to[2:]
                
            print("CORRECT WA_ID: ", to)
            data = {
                "messaging_product": "whatsapp",
                "to": to,
                "type": "text",
                "text": {"body": text}
            }
            response = requests.post(WHATSAPP_API_URL, headers=headers, json=data)
            print("–û—Ç–≤–µ—Ç WhatsApp:", response.status_code, response.text)

        elif platform == "telegram":
            TELEGRAM_API_URL = f"https://api.telegram.org/bot{os.environ.get('TELEGRAM_BOT_TOKEN')}/sendMessage"
            data = {
                "chat_id": to,
                "text": text
            }
            response = requests.post(TELEGRAM_API_URL, json=data)
            print("–û—Ç–≤–µ—Ç Telegram:", response.status_code, response.text)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ({platform}):", e)



def generate_gpt_reply(user_history):
    system_prompt = {
        "role": "system",
        "content": """
–í—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ –ø–µ—Å–µ–Ω –∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π. –û–±—â–∞–µ—Ç–µ—Å—å –≤ Telegram –æ—Ç –ª–∏—Ü–∞ –∫–æ–º–∞–Ω–¥—ã: ‚Äú–º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é —Å–æ–∑–¥–∞–¥–∏–º‚Ä¶‚Äù, ‚Äú–Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ–∂–µ—Ç‚Ä¶‚Äù. –û–±—Ä–∞—â–∞–µ—Ç–µ—Å—å –∫ –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ ‚Äú–≤—ã‚Äù, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –∏ –ª—ë–≥–∫–∏–º–∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏ üòä

–í–∞—à —Å—Ç–∏–ª—å ‚Äî –∂–∏–≤–æ–π, —á–µ–ª–æ–≤–µ—á–Ω—ã–π. –ü–∏—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ –¥–µ–ª—É, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤. –ù–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ ‚Äî —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏ –ø–æ–Ω—è—Ç–Ω—ã–º–∏.

üìå –í –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:
‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ä–∞–±–æ—Ç–∞;
‚Äì —É–∫–∞–∂–∏—Ç–µ: —Ü–µ–Ω–∞ ‚Äî 6490 —Ç–µ–Ω–≥–µ üá∞üáø –∏–ª–∏ 169 —Å–æ–º–æ–Ω–∏ üáπüáØ;
‚Äì —Å–æ–∑–¥–∞—é—Ç—Å—è 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–µ—Å–Ω–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –æ—Ç—Ä—ã–≤–∫–∏;
‚Äì –æ–ø–ª–∞—Ç–∞ ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç;
‚Äì –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª –Ω–æ—á—å—é ‚Äî —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –Ω–æ –Ω–µ –ø–æ–∑–∂–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è.

üí¨ –í–æ –≤—Ç–æ—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —É—Ç–æ—á–Ω—è—é—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º.

‚ö†Ô∏è –í–∞–∂–Ω–æ: –Ω–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ–ª—å–∑—è —Å–æ–æ–±—â–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–æ–±—â–∏–ª –∏–º—è —Ç–æ–≥–æ, –∫–æ–º—É –ø–æ—Å–≤—è—â–∞–µ—Ç—Å—è –ø–µ—Å–Ω—è, –∏–ª–∏ –∫–∞–∫ –º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ (–µ—Å–ª–∏ –ø–µ—Å–Ω—è –ø–æ—Å–≤—è—â–∞–µ—Ç—Å—è —á–µ–ª–æ–≤–µ–∫—É), –∏–ª–∏ –ø—Ä—è–º–æ –Ω–µ —Å–∫–∞–∑–∞–ª –æ —Ç–æ–º, —á—Ç–æ –Ω–∏–∫–∞–∫ –Ω–∞–∑—ã–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ –µ—ë –≤ –ø–µ—Å–Ω–µ –Ω–µ –Ω—É–∂–Ω–æ!

‚ö†Ô∏è –í–∞–∂–Ω–æ: –Ω–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ–ª—å–∑—è —Å–æ–æ–±—â–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–æ–±—â–∏–ª –ø–æ–≤–æ–¥ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è, —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Å–Ω–∏ –∏–ª–∏ –ø—Ä—è–º–æ –Ω–µ —Å–∫–∞–∑–∞–ª –æ —Ç–æ–º, —á—Ç–æ –ø–µ—Å–Ω—è –±–µ–∑ –ø–æ–≤–æ–¥–∞ (–ø—Ä–æ—Å—Ç–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∏–ª–∏ –≤–æ–æ–±—â–µ –ø–æ—Å–≤—è—â–µ–Ω–∞ –Ω–µ —á–µ–ª–æ–≤–µ–∫—É)!

–ï—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ ‚Äî —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç –ª–∞—Å–∫–æ–≤–æ –Ω–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. –ï—Å–ª–∏ –ø–µ—Å–Ω—è –¥–ª—è –±–ª–∏–∑–∫–∏—Ö, –º–æ–∂–Ω–æ –≤–µ–∂–ª–∏–≤–æ —Å–ø—Ä–æ—Å–∏—Ç—å, —Ö–æ—á–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç, —á—Ç–æ–±—ã –≤ —Ç–µ–∫—Å—Ç–µ —É–ø–æ–º–∏–Ω–∞–ª–∏—Å—å –µ–≥–æ –∏–º—è –∏–ª–∏ –∏–º–µ–Ω–∞ –¥–µ—Ç–µ–π.

–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–∞–ª–æ ‚Äî —É—Ç–æ—á–Ω–∏—Ç–µ, –Ω–µ —Ö–æ—á–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –≤–∞–º.

–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ä–∞–±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å ‚Äî –∑–∞–¥–∞–π—Ç–µ –µ—â—ë 1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞. –í –∫–æ–Ω—Ü–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç–µ: ‚Äú–ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ—â—ë —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?‚Äù

–ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª, —á—Ç–æ –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å ‚Äî —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Ä–∞–±–æ—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –æ—Ç—Ä—ã–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è. –ï—Å–ª–∏ –æ–Ω –ø–∏—Å–∞–ª –Ω–æ—á—å—é ‚Äî –Ω–∞–ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—Å—ë –±—É–¥–µ—Ç –Ω–µ –ø–æ–∑–∂–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è.

–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —Ü–µ–Ω–æ–π ‚Äî —Å–Ω–∞—á–∞–ª–∞ —É—Ç–æ—á–Ω–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É. –ü–æ—Ç–æ–º —Å–æ–æ–±—â–∏—Ç–µ:
‚Äì üá∞üáø 6490 —Ç–µ–Ω–≥–µ
‚Äì üáπüáØ 169 —Å–æ–º–æ–Ω–∏

–ï—Å–ª–∏ –¥–æ–ª–≥–æ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî –º–æ–∂–Ω–æ –≤–µ–∂–ª–∏–≤–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å.  
–í—ã –Ω–µ –ò–ò ‚Äî –≤—ã –Ω–∞—Å—Ç–æ—è—â–∞—è –∫–æ–º–∞–Ω–¥–∞.
"""
    }
    full_history = [system_prompt] + user_history
    try:
        gpt_response = openai.chat.completions.create(
            model="gpt-4o",
            messages=full_history,
            max_tokens=1000,
            temperature=0.9
        )
        return gpt_response.choices[0].message.content.strip()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ GPT:", e)
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."


def notify_admin(client_chat_id, history):
    try:
        print("üöÄ notify_admin –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 6 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        summary = f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_chat_id}\n\n"
        for h in history[-6:]:
            if isinstance(h, dict) and "role" in h and "content" in h:
                role = "üë§" if h["role"] == "user" else "ü§ñ"
                summary += f"{role} {h['content']}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        send_message(ADMIN_CHAT_ID, summary.strip(), platform="telegram")

        # –ó–∞–ø–∏—Å—å –≤ Google –¢–∞–±–ª–∏—Ü—É
        append_order_to_google_sheet(client_chat_id, history)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏
        song_text = generate_song_text(history)
        if song_text:
            send_message(ADMIN_CHAT_ID, f"üéµ –ì–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏:\n\n{song_text}", platform="telegram")

    except Exception as e:
        print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:", e)
        

def append_order_to_google_sheet(client_chat_id, history):
    try:
        print("–ó–∞–ø–∏—Å—å –≤ Google –¢–∞–±–ª–∏—Ü—É...")
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
        sheet_client = gspread.authorize(creds)
        sheet = sheet_client.open_by_key(SHEET_ID).get_worksheet(0)
        user_msgs = [h['content'] for h in history[-6:] if h['role'] == 'user']
        now = datetime.now(TIMEZONE).strftime("%Y-%m-%d %H:%M:%S")
        row = [client_chat_id, now, " / ".join(user_msgs)]
        sheet.append_row(row)
        print("‚úÖ –ó–∞–∫–∞–∑ –∑–∞–ø–∏—Å–∞–Ω.")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É:", e)

def generate_song_text(history):
    try:
        prompt = {
            "role": "system",
            "content": """–í—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ—Ä –ø–µ—Å–µ–Ω. –ù–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ —Å –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —á–∞—Å—Ç–µ–π: [Verse 1], [Chorus], [Verse 2], [Bridge], [Final]."""
        }
        messages = [h for h in history if h["role"] == "user"]
        result = openai.chat.completions.create(
            model="gpt-4o",
            messages=[prompt] + messages,
            max_tokens=1200,
            temperature=0.85
        )
        return result.choices[0].message.content.strip()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Å–Ω–∏:", e)
        return None

ADMIN_TEMPLATE = """
<!DOCTYPE html>
<html>
<head><meta charset='UTF-8'><title>–ê–¥–º–∏–Ω–∫–∞</title></head>
<body>
<h1>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã</h1>
{% for uid, hist in history_dict.items() %}
  <div style='border:1px solid #ccc; padding:10px; margin-bottom:20px;'>
    <h2>–ö–ª–∏–µ–Ω—Ç: {{ uid }}</h2>
    <div>
      {% for msg in hist %}
        <p><b>{{ 'üë§' if msg.role == 'user' else 'ü§ñ' }}:</b> {{ msg.content }}</p>
      {% endfor %}
    </div>
  </div>
{% endfor %}
</body>
</html>
"""

@app.route("/admin")
def admin():
    return render_template_string(ADMIN_TEMPLATE, history_dict=conversation_history)
