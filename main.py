from flask import Flask, request
import requests
from openai import OpenAI
import os
import threading
import time
from datetime import datetime
import pytz

app = Flask(__name__)
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
ADMIN_CHAT_ID = -1002351934678  # ID –≥—Ä—É–ø–ø—ã
TOPIC_ID = 21753  # ID —Ç–µ–º—ã —Ñ–æ—Ä—É–º–∞

conversation_history = {}
last_message_time = {}
pending_timers = {}

DELAY_SECONDS = 10
TIMEZONE = pytz.timezone("Asia/Almaty")

@app.route("/")
def home():
    return "ü§ñ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route("/webhook", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    if not data or "message" not in data:
        return "ok"

    message = data["message"]
    chat_id = message["chat"]["id"]
    chat_type = message["chat"]["type"]

    if chat_type != "private":
        return "ok"

    user_id = str(chat_id)
    text = ""

    if "voice" in message:
        duration = message["voice"].get("duration", 0)
        if duration > 300:
            send_message(chat_id, "–í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–≤–æ–ª—å–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ üòÖ –ß—Ç–æ–±—ã –≤—Å—ë –ø—Ä–æ—à–ª–æ —Ç–æ—á–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ –∏ –º—ã –Ω–∏—á–µ–≥–æ –Ω–µ —É–ø—É—Å—Ç–∏–ª–∏, –º–æ–≥–ª–∏ –±—ã –≤—ã –µ–≥–æ —á—É—Ç—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ –≤ –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ–æ—Ä–º–µ?")
            return "ok"

        file_id = message["voice"]["file_id"]
        text = transcribe_voice(file_id)
        if not text:
            return "ok"

    elif "text" in message:
        text = message["text"].strip()

    if not text:
        return "ok"

    if text.lower() == "memory_clean":
        conversation_history[user_id] = []
        last_message_time[user_id] = time.time()
        send_message(chat_id, "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üòä")
        return "ok"

    if user_id not in conversation_history:
        conversation_history[user_id] = []
        send_message(chat_id, "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! ‚ò∫Ô∏è –ß–µ–º –º–æ–∂–µ–º –ø–æ–º–æ—á—å? –•–æ—Ç–∏—Ç–µ –∫–æ–≥–æ-—Ç–æ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å? üòÅ")

    conversation_history[user_id].append({"role": "user", "content": text})
    conversation_history[user_id] = conversation_history[user_id][-50:]
    last_message_time[user_id] = time.time()

    if user_id in pending_timers:
        pending_timers[user_id].cancel()

    timer = threading.Timer(DELAY_SECONDS, process_delayed_reply, args=(user_id, chat_id))
    timer.start()
    pending_timers[user_id] = timer

    return "ok"

def is_late_evening_or_night():
    now = datetime.now(TIMEZONE)
    return now.hour >= 22 or now.hour < 8

def process_delayed_reply(user_id, chat_id):
    if time.time() - last_message_time[user_id] >= DELAY_SECONDS:
        reply = generate_gpt_reply(conversation_history[user_id])
        if reply:
            conversation_history[user_id].append({"role": "assistant", "content": reply})
            conversation_history[user_id] = conversation_history[user_id][-50:]
            send_message(chat_id, reply)
            if "–º—ã –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É" in reply.lower() or "–Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É" in reply.lower():
                notify_admin(chat_id, conversation_history[user_id])
        pending_timers.pop(user_id, None)

def generate_gpt_reply(user_history):
    system_prompt = {
        "role": "system",
        "content": """
–í—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ –ø–µ—Å–µ–Ω –∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π. –û–±—â–∞–µ—Ç–µ—Å—å –≤ Telegram –æ—Ç –ª–∏—Ü–∞ –∫–æ–º–∞–Ω–¥—ã: ‚Äú–º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é —Å–æ–∑–¥–∞–¥–∏–º‚Ä¶‚Äù, ‚Äú–Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ–∂–µ—Ç‚Ä¶‚Äù. –û–±—Ä–∞—â–∞–µ—Ç–µ—Å—å –∫ –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ ‚Äú–≤—ã‚Äù, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –∏ –ª—ë–≥–∫–∏–º–∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏ üòä
... (–æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –µ—Å—Ç—å, –æ–±—Ä–µ–∑–∞–ª –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
"""
    }

    full_history = [system_prompt]

    if is_late_evening_or_night():
        full_history.append({
            "role": "system",
            "content": "–ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª –Ω–æ—á—å—é. –ù–∞–ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –ø–µ—Å–Ω—è –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –Ω–µ –ø–æ–∑–∂–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è."
        })

    full_history += user_history

    try:
        gpt_response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=full_history,
            max_tokens=1000,
            temperature=0.9
        )
        return gpt_response.choices[0].message.content.strip()
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ GPT:", e)
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."

def transcribe_voice(file_id):
    try:
        file_info = requests.get(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getFile?file_id={file_id}"
        ).json()
        file_path = file_info["result"]["file_path"]
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_path}"

        response = requests.get(file_url)
        temp_path = "/tmp/voice.ogg"
        with open(temp_path, "wb") as f:
            f.write(response.content)

        with open(temp_path, "rb") as audio_file:
            transcription = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                response_format="text"
            )
        return transcription.strip()

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞:", e)
        return None

def send_message(chat_id, text, thread_id=None):
    payload = {
        "chat_id": chat_id,
        "text": text
    }
    if thread_id:
        payload["message_thread_id"] = thread_id

    try:
        response = requests.post(TELEGRAM_API_URL, json=payload)
        print("üì® –û—Ç–≤–µ—Ç Telegram:", response.status_code, response.text)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", e)

def notify_admin(client_chat_id, history):
    try:
        summary = f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_chat_id}\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
        for h in history[-6:]:
            role = "üë§" if h['role'] == "user" else "üßê"
            summary += f"{role} {h['content']}\n"

        send_message(ADMIN_CHAT_ID, summary.strip(), thread_id=TOPIC_ID)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:", e)
