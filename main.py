import os
import json
import threading
import time
from datetime import datetime

import requests
from flask import Flask, request
import openai
import pytz
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –°–æ–∑–¥–∞–µ–º credentials.json –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not os.path.exists("credentials.json"):
    creds_env = os.environ.get("GOOGLE_CREDS_JSON")
    if creds_env:
        with open("credentials.json", "w") as f:
            f.write(creds_env)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á OpenAI
openai.api_key = os.environ.get("OPENAI_API_KEY")

app = Flask(__name__)

TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
ADMIN_CHAT_ID = "-1002351934678"
ADMIN_TOPIC_ID = 21753

conversation_history = {}
last_message_time = {}
pending_timers = {}

DELAY_SECONDS = 10
TIMEZONE = pytz.timezone("Asia/Almaty")


@app.route("/")
def home():
    return "ü§ñ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"


@app.route("/webhook", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    if not data or "message" not in data:
        return "ok"

    message = data["message"]
    chat_id = message["chat"]["id"]
    chat_type = message["chat"].get("type")

    if chat_type != "private":
        return "ok"

    user_id = str(chat_id)
    username = message["from"].get("username", "‚Äî")
    text = ""

    if "voice" in message:
        duration = message["voice"].get("duration", 0)
        if duration > 300:
            send_message(chat_id, "–í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–≤–æ–ª—å–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ üòÖ –ß—Ç–æ–±—ã –≤—Å—ë –ø—Ä–æ—à–ª–æ —Ç–æ—á–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ –∏ –º—ã –Ω–∏—á–µ–≥–æ –Ω–µ —É–ø—É—Å—Ç–∏–ª–∏, –º–æ–≥–ª–∏ –±—ã –≤—ã –µ–≥–æ —á—É—Ç—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ –≤ –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ–æ—Ä–º–µ?")
            return "ok"

        file_id = message["voice"]["file_id"]
        text = transcribe_voice(file_id)
        if not text:
            return "ok"

    elif "text" in message:
        text = message["text"].strip()

    if not text:
        return "ok"

    if text.lower() == "memory_clean":
        conversation_history[user_id] = []
        last_message_time[user_id] = time.time()
        send_message(chat_id, "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üòä")
        return "ok"

    if user_id not in conversation_history:
        conversation_history[user_id] = []
        send_message(chat_id, "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! ‚ò∫Ô∏è –ß–µ–º –º–æ–∂–µ–º –ø–æ–º–æ—á—å? –•–æ—Ç–∏—Ç–µ –∫–æ–≥–æ-—Ç–æ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å? üòÅ")

    conversation_history[user_id].append({"role": "user", "content": text})
    conversation_history[user_id] = conversation_history[user_id][-50:]
    last_message_time[user_id] = time.time()

    if user_id in pending_timers:
        pending_timers[user_id].cancel()

    timer = threading.Timer(DELAY_SECONDS, process_delayed_reply, args=(user_id, chat_id, username))
    timer.start()
    pending_timers[user_id] = timer

    return "ok"


def is_late_evening_or_night():
    now = datetime.now(TIMEZONE)
    return now.hour >= 22 or now.hour < 8


def process_delayed_reply(user_id, chat_id, username):
    if time.time() - last_message_time[user_id] >= DELAY_SECONDS:
        reply = generate_gpt_reply(conversation_history[user_id])
        if reply:
            conversation_history[user_id].append({"role": "assistant", "content": reply})
            conversation_history[user_id] = conversation_history[user_id][-50:]
            send_message(chat_id, reply)
            if "–º—ã –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É" in reply.lower() or "–Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É" in reply.lower():
                notify_admin(chat_id, username, conversation_history[user_id])
        pending_timers.pop(user_id, None)


def generate_gpt_reply(user_history):
    system_prompt = {
        "role": "system",
        "content": """
–í—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ –ø–µ—Å–µ–Ω –∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π. –û–±—â–∞–µ—Ç–µ—Å—å –≤ Telegram –æ—Ç –ª–∏—Ü–∞ –∫–æ–º–∞–Ω–¥—ã: ‚Äú–º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é —Å–æ–∑–¥–∞–¥–∏–º‚Ä¶‚Äù, ‚Äú–Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ–∂–µ—Ç‚Ä¶‚Äù. –û–±—Ä–∞—â–∞–µ—Ç–µ—Å—å –∫ –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ ‚Äú–≤—ã‚Äù, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –∏ –ª—ë–≥–∫–∏–º–∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏ üòä

–í–∞—à —Å—Ç–∏–ª—å ‚Äî –∂–∏–≤–æ–π, —á–µ–ª–æ–≤–µ—á–Ω—ã–π. –ü–∏—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ –¥–µ–ª—É, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤. –ù–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ ‚Äî —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏ –ø–æ–Ω—è—Ç–Ω—ã–º–∏.

üìå –í –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:
‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ä–∞–±–æ—Ç–∞;
‚Äì —É–∫–∞–∂–∏—Ç–µ: —Ü–µ–Ω–∞ ‚Äî 6490 —Ç–µ–Ω–≥–µ üá∞üáø –∏–ª–∏ 169 —Å–æ–º–æ–Ω–∏ üáπüáØ;
‚Äì —Å–æ–∑–¥–∞—é—Ç—Å—è 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–µ—Å–Ω–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –æ—Ç—Ä—ã–≤–∫–∏;
‚Äì –æ–ø–ª–∞—Ç–∞ ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç;
‚Äì –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª –Ω–æ—á—å—é ‚Äî —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –Ω–æ –Ω–µ –ø–æ–∑–∂–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è.

üí¨ –í–æ –≤—Ç–æ—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —É—Ç–æ—á–Ω—è—é—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º.

‚ö†Ô∏è –í–∞–∂–Ω–æ: –Ω–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ–ª—å–∑—è —Å–æ–æ–±—â–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–æ–±—â–∏–ª –∏–º—è —Ç–æ–≥–æ, –∫–æ–º—É –ø–æ—Å–≤—è—â–∞–µ—Ç—Å—è –ø–µ—Å–Ω—è, –∏–ª–∏ –∫–∞–∫ –º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ (–µ—Å–ª–∏ –ø–µ—Å–Ω—è –ø–æ—Å–≤—è—â–∞–µ—Ç—Å—è —á–µ–ª–æ–≤–µ–∫—É), –∏–ª–∏ –ø—Ä—è–º–æ –Ω–µ —Å–∫–∞–∑–∞–ª –æ —Ç–æ–º, —á—Ç–æ –Ω–∏–∫–∞–∫ –Ω–∞–∑—ã–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ –µ—ë –≤ –ø–µ—Å–Ω–µ –Ω–µ –Ω—É–∂–Ω–æ!

‚ö†Ô∏è –í–∞–∂–Ω–æ: –Ω–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ–ª—å–∑—è —Å–æ–æ–±—â–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–æ–±—â–∏–ª –ø–æ–≤–æ–¥ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è, —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Å–Ω–∏ –∏–ª–∏ –ø—Ä—è–º–æ –Ω–µ —Å–∫–∞–∑–∞–ª –æ —Ç–æ–º, —á—Ç–æ –ø–µ—Å–Ω—è –±–µ–∑ –ø–æ–≤–æ–¥–∞ (–ø—Ä–æ—Å—Ç–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∏–ª–∏ –≤–æ–æ–±—â–µ –ø–æ—Å–≤—è—â–µ–Ω–∞ –Ω–µ —á–µ–ª–æ–≤–µ–∫—É)!

–ï—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ ‚Äî —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç –ª–∞—Å–∫–æ–≤–æ –Ω–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. –ï—Å–ª–∏ –ø–µ—Å–Ω—è –¥–ª—è –±–ª–∏–∑–∫–∏—Ö, –º–æ–∂–Ω–æ –≤–µ–∂–ª–∏–≤–æ —Å–ø—Ä–æ—Å–∏—Ç—å, —Ö–æ—á–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç, —á—Ç–æ–±—ã –≤ —Ç–µ–∫—Å—Ç–µ —É–ø–æ–º–∏–Ω–∞–ª–∏—Å—å –µ–≥–æ –∏–º—è –∏–ª–∏ –∏–º–µ–Ω–∞ –¥–µ—Ç–µ–π.

–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–∞–ª–æ ‚Äî —É—Ç–æ—á–Ω–∏—Ç–µ, –Ω–µ —Ö–æ—á–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –≤–∞–º.

–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ä–∞–±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å ‚Äî –∑–∞–¥–∞–π—Ç–µ –µ—â—ë 1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞. –í –∫–æ–Ω—Ü–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç–µ: ‚Äú–ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ—â—ë —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?‚Äù

–ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª, —á—Ç–æ –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å ‚Äî —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Ä–∞–±–æ—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –æ—Ç—Ä—ã–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è. –ï—Å–ª–∏ –æ–Ω –ø–∏—Å–∞–ª –Ω–æ—á—å—é ‚Äî –Ω–∞–ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—Å—ë –±—É–¥–µ—Ç –Ω–µ –ø–æ–∑–∂–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è.

–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —Ü–µ–Ω–æ–π ‚Äî —Å–Ω–∞—á–∞–ª–∞ —É—Ç–æ—á–Ω–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É. –ü–æ—Ç–æ–º —Å–æ–æ–±—â–∏—Ç–µ:
‚Äì üá∞üáø 6490 —Ç–µ–Ω–≥–µ
‚Äì üáπüáØ 169 —Å–æ–º–æ–Ω–∏

–ï—Å–ª–∏ –¥–æ–ª–≥–æ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî –º–æ–∂–Ω–æ –≤–µ–∂–ª–∏–≤–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å.  
–í—ã –Ω–µ –ò–ò ‚Äî –≤—ã –Ω–∞—Å—Ç–æ—è—â–∞—è –∫–æ–º–∞–Ω–¥–∞.
"""
    }

    full_history = [system_prompt]

    if is_late_evening_or_night():
        full_history.append({
            "role": "system",
            "content": "–ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª –Ω–æ—á—å—é. –ù–∞–ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –ø–µ—Å–Ω—è –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –Ω–µ –ø–æ–∑–∂–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è."
        })

    full_history += user_history

    try:
        gpt_response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=full_history,
            max_tokens=1000,
            temperature=0.9
        )
        return gpt_response.choices[0].message.content.strip()
    except Exception as e:
        print("‚ùå GPT error:", e)
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."


def transcribe_voice(file_id):
    try:
        file_info = requests.get(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getFile?file_id={file_id}"
        ).json()
        file_path = file_info["result"]["file_path"]
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_path}"

        response = requests.get(file_url)
        temp_path = "/tmp/voice.ogg"
        with open(temp_path, "wb") as f:
            f.write(response.content)

        with open(temp_path, "rb") as audio_file:
            transcription = openai.Audio.transcribe("whisper-1", audio_file)
        return transcription["text"].strip()

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞:", e)
        return None


def send_message(chat_id, text, thread_id=None):
    try:
        payload = {
            "chat_id": chat_id,
            "text": text
        }
        if thread_id:
            payload["message_thread_id"] = thread_id
        response = requests.post(TELEGRAM_API_URL, json=payload)
        print("üì® –û—Ç–≤–µ—Ç Telegram:", response.status_code, response.text)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", e)


def notify_admin(client_chat_id, username, history):
    try:
        summary = f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_chat_id} (@{username})\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
        for h in history[-6:]:
            role = "üë§" if h['role'] == "user" else "ü§ñ"
            summary += f"{role} {h['content']}\n"
        send_message(ADMIN_CHAT_ID, summary.strip(), thread_id=ADMIN_TOPIC_ID)
        append_order_to_google_sheet(client_chat_id, username, history)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:", e)


def append_order_to_google_sheet(client_chat_id, username, history):
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
        client = gspread.authorize(creds)

        sheet = client.open("Telegram –ó–∞–∫–∞–∑—ã").worksheet("–õ–∏—Å—Ç1")
        last_msgs = [h['content'] for h in history[-6:] if h['role'] == 'user']
        now = datetime.now(TIMEZONE).strftime("%Y-%m-%d %H:%M:%S")

        row = [str(client_chat_id), f"@{username}", now, " / ".join(last_msgs)]
        sheet.append_row(row)
        print("‚úÖ –ó–∞–∫–∞–∑ –∑–∞–ø–∏—Å–∞–Ω –≤ Google –¢–∞–±–ª–∏—Ü—É.")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É:", e)
